function init(self)

	self.score_node=gui.get_node("warning")
end

local function clearText(self,node)
	gui.set_text(self.score_node, "")
end

-- Delay in seconds (1 second)


function on_message(self, message_id, sender)
	if message_id == hash("update_warning") then
		-- set the score counter to new score
		-- local score_node = gui.get_node("warning")
		if self.score_node then
			-- Update the text of the "score" node
			gui.set_text(self.score_node, "No enough BPï¼Œnext turn ")
			local delay = 1

			-- Set the timer to clear the text after the delay
			timer.delay(delay, false, clearText)
		end
	end
	if message_id == hash("update_cultivate") then
		-- set the score counter to new score
		-- local score_node = gui.get_node("warning")
		if self.score_node then
			-- Update the text of the "score" node
			gui.set_text(self.score_node, "right click to cultivate ")
			local delay = 1

			-- Set the timer to clear the text after the delay
			timer.delay(delay, false, clearText)
		end
	end
	if message_id == hash("weak") then
		-- set the score counter to new score
		-- local score_node = gui.get_node("warning")
		if self.score_node then
			-- Update the text of the "score" node
			gui.set_text(self.score_node, "BP not enough!")
			local delay = 1

			-- Set the timer to clear the text after the delay
			timer.delay(delay, false, clearText)
		end
	end
	if message_id == hash("finish") then
		-- set the score counter to new score
		-- local score_node = gui.get_node("warning")
		if self.score_node then
			-- Update the text of the "score" node
			gui.set_text(self.score_node, "CONGRADULATION!")
			local delay = 1

			-- Set the timer to clear the text after the delay
			timer.delay(delay, false, clearText)
		end
	end
end